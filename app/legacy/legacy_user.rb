class LegacyUser < ActiveRecord::Base
  include LegacyBase
  establish_connection "legacy"
  image_accessor :avatar
  image_accessor :company_logo

  self.table_name = "users"
  # self.primary_key = "old_id"

  # To use autogenerated ids uncomment below
  def dont_migrate_ids
    false
  end

  def migrate_where
    {id: self.id}
  end

  def map
    {
      email: set_email,
      name: self.name,
      nickname: self.nickname,
      bio: self.bio,
      newsletter: self.newsletter,
      full_name: self.full_name,
      image_url: self.image_url,
      address_street: self.address_street,
      address_number: self.address_number,
      address_complement: self.address_complement,
      address_neighbourhood: self.address_neighbourhood,
      address_city: self.address_city,
      address_state: self.address_state,
      address_zip_code: self.address_zip_code,
      phone_number: self.phone_number,
      locale: 'en',
      twitter: self.twitter,
      facebook_link: self.facebook_link,
      other_link: self.other_link,
      new_project: self.new_project,
      remote_uploaded_image_url: download_avatar,
      remote_company_logo_url: download_company_logo,
      admin: self.admin,
      encrypted_password: self.encrypted_password,
      reset_password_token: self.reset_password_token,
      reset_password_sent_at: self.reset_password_sent_at,
      sign_in_count: self.sign_in_count,
      current_sign_in_at: self.current_sign_in_at,
      last_sign_in_at: self.last_sign_in_at,
      current_sign_in_ip: self.current_sign_in_ip,
      last_sign_in_ip: self.last_sign_in_ip,
      confirmation_token: self.confirmation_token,
      confirmed_at: self.confirmed_at || Time.now,
      confirmation_sent_at: self.confirmation_sent_at,
      profile_type: self.profile_type,
      company_name: self.company_name
    }

  end

  def download_avatar
    if self.avatar.present?
      self.avatar.remote_url(expires: 1.day.from_now)
    end
  end

  def download_company_logo
    if self.company_logo.present?
      self.company_logo.remote_url(expires: 1.day.from_now)
    end
  end

  def associate
    {
       #authorizations: build_autorizations
    }
  end

  def set_email
    return "change-your-email+#{self.id}@neighbor.ly" unless self.email.present?
    self.email
  end

  #def build_autorizations
    #auths = []

    #if self.provider != 'devise'
      #provider_name = self.provider
      #provider_name = 'google_oauth2' if self.provider == 'google'

      #provider = OauthProvider.where(name: provider_name).first

      #auths << Authorization.new(uid: self.uid, oauth_provider_id: provider.id)
    #end
    #auths
  #end

end
